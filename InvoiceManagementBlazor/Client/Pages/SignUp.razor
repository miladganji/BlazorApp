@layout LoginLayout
@inject HttpClient Http
@inject NavigationManager navigation
@inject InvoiceManagementBlazor.Client.Services.IhttpService httpservice
@page "/SignUp"
<div class="col-6" style="border-right:3px;border-color:gray;float:left">
    <img src="download.jpg" class="col-11" />
</div>

<div class="col-6" style="float:right;padding-top:50px;">
    <div class="col-12">
        <EditForm Model="user" OnInvalidSubmit="CreateUser">
            <DataAnnotationsValidator />
            <label class="font-weight-bold" style="color:purple;">Login to System</label>
            <div class="form-group">


                <InputText @bind-Value="user.FullName" class="form-control col-7" placeholder="FullName" />
                <ValidationMessage For="@(()=>user.FullName)" />
            </div>
            <div class="form-group">


                <InputText @bind-Value="user.UserName" class="form-control col-7" placeholder="Username" />
                <ValidationMessage For="@(()=>user.UserName)" />
            </div>

            <div class="form-group">


                <InputText @bind-Value="user.Password" class="form-control col-7" placeholder="Password" />
                <ValidationMessage For="@(()=>user.Password)" />
            </div>

            <a class="btn btn-info" href="/">Login</a>
            <button class="btn btn-warning">sign up</button>
        </EditForm>

        @if (LoginFailed != null)
        {
            <div class="col-12">
                <span class="font-weight-bold" style="color:red;">@LoginFailed</span>
            </div>
        }
    </div>
</div>

@code {
    public User user = new User();
    [Parameter] public string LoginFailed { get; set; } = null;

    public async Task CreateUser()
    {
        Console.WriteLine(user.FullName);
        Console.WriteLine(user.UserName);
        Console.WriteLine(user.Password);
        Console.WriteLine(navigation.BaseUri);




        try
        {

            var res = await httpservice.Post(navigation.BaseUri + "api/Home/CreatePerson", user);
        }
        catch (Exception ex)
        {

            throw new ArgumentException(ex.Message);
        }


        navigation.NavigateTo("/");

        await Task.CompletedTask;
    }
}